{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","description","e","setState","defineProperty","target","name","value","preventDefault","fetch","formAction","headers","Accept","Content-Type","body","JSON","stringify","react_default","a","createElement","className","window","token","href","rel","class","id","type","checked","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+KCKnBC,iCAEjB,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAERQ,MAAQ,CAAEC,YAAa,IAHJR,wEAMnBS,GACLN,KAAKO,SAALT,OAAAU,EAAA,EAAAV,CAAA,GACKQ,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,yCAIzBL,GACLA,EAAEM,iBAEFC,MAAMb,KAAKL,MAAMmB,WAAY,CACzBC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACf,YAAaL,KAAKI,MAAMC,gBAGlDL,KAAKO,SAAS,CAACF,YAAa,sCAGhC,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,mBACQE,OAAOC,OAEfL,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVG,KAAK,sBACLlB,OAAO,SACPmB,IAAI,wBAIZP,EAAAC,EAAAC,cAAA,QAAMM,MAAM,aACRR,EAAAC,EAAAC,cAAA,OAAKM,MAAM,OACPR,EAAAC,EAAAC,cAAA,OAAKM,MAAM,YACPR,EAAAC,EAAAC,cAAA,sBACDF,EAAAC,EAAAC,cAAA,YAAUO,GAAG,cAEhBT,EAAAC,EAAAC,cAAA,OAAKM,MAAM,YACPR,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKO,GAAG,YAGZT,EAAAC,EAAAC,cAAA,OAAKM,MAAM,YACPR,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKO,GAAG,YACJT,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,WAAWrB,KAAK,kBAAkBsB,QAAQ,YAA7D,qBAAkGX,EAAAC,EAAAC,cAAA,WACjGF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,WAAWrB,KAAK,gBAAnC,qBACDW,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASF,MAAM,kBAAkBC,GAAG,UAAUnB,MAAM,YAChEU,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASF,MAAM,iBAAiBC,GAAG,QAAQnB,MAAM,aAIxEU,EAAAC,EAAAC,cAAA,OAAKM,MAAM,OACRR,EAAAC,EAAAC,cAAA,OAAKM,MAAM,YACPR,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,YAAUO,GAAG,YAEjBT,EAAAC,EAAAC,cAAA,OAAKM,MAAM,YACPR,EAAAC,EAAAC,cAAA,uCAvEiBU,cCObC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":" /js/main.04bad0ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \" /media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class App extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = { description: '' };\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        fetch(this.props.formAction, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({description: this.state.description})\n        });\n\n        this.setState({description: ''});\n    }\n  render() {\n    return (\n      <div className=\"App\">\n      \n          <p>\n          Test = {window.token}\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n           \n          </a>\n    <form class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-5\">\n                <h1>Template</h1>\n               <textarea id=\"template\"></textarea>\n            </div>\n            <div class=\"col-md-5\">\n                <h1>Render</h1>\n                <div id=\"render\"></div>\n      \n            </div>\n            <div class=\"col-md-2\">\n                <h1>Settings</h1>\n                <div id=\"settings\">\n                    <label><input type=\"checkbox\" name=\"showwhitespaces\" checked=\"checked\" /> Show whitespaces</label><br/>\n                     <label><input type=\"checkbox\" name=\"dummyvalues\" /> Use dummy values</label>\n                    <h1> JSON</h1>\n                  \n                    <input type=\"button\" class=\"btn btn-success\" id=\"convert\" value=\"Convert\" />\n                    <input type=\"button\" class=\"btn btn-danger\" id=\"clear\" value=\"Clear\" />\n                </div>\n            </div>\n        </div>\n         <div class=\"row\">\n            <div class=\"col-md-5\">\n                <h1>Values</h1>\n                <textarea id=\"values\"></textarea>\n            </div>\n            <div class=\"col-md-7\">\n                <h1>Custom Filters</h1>\n            \n            </div>\n        </div>\n       \n    </form>\n\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}