{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","person","data","isLoading","value1","value2","handleChange","bind","assertThisInitialized","handleSubmit","click","_this2","request_info","template","values","input_type","showwhitespaces","dummyvalues","setState","axios","post","headers","Content-Type","then","response","console","log","catch","err","event","value","target","alert","preventDefault","fetch","json","results","status","react_default","a","createElement","className","window","token","id","name","first","last","href","rel","class","onChange","handleValueChange","type","onClick","disabled","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAMqBA,2BAEjB,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAoGjBQ,MAAQ,CACJC,SAAS,EACTC,OAAQ,MApGRT,EAAKO,MAAQ,CACbG,KAAM,GACNC,WAAW,EACXC,OAAQ,0DACRC,OAAQ,iBAKRb,EAAKc,aAAed,EAAKc,aAAaC,KAAlBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KACpBA,EAAKiB,aAAejB,EAAKiB,aAAaF,KAAlBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KACpBA,EAAKkB,MAAQlB,EAAKkB,MAAMH,KAAXd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAdWA,uEAsBvB,IAAAmB,EAAAhB,KAgBKiB,EAAe,CACjBC,SAAUlB,KAAKI,MAAMK,OACrBU,OAAQnB,KAAKI,MAAMM,OACnBU,WAAY,OACXC,gBAAiB,EAClBC,YAAa,GAGjBtB,KAAKuB,SAAS,CAAEf,WAAW,IA0B3BgB,IAAMC,KAAK,gCAAiC,CAACR,gBAAe,CAACS,QAxC/C,CACVC,eAAgB,sBAwCfC,KAAK,SAACC,GACDb,EAAKO,SAAS,CAAEhB,KAAMsB,EAAStB,KAAMC,WAAW,IAC/CsB,QAAQC,IAAId,KAElBe,MAAM,SAACC,GACFjB,EAAKO,SAAS,CAAEhB,KAAM0B,EAAKzB,WAAW,IACrCsB,QAAQC,IAAId,0CAKhBiB,GACXlC,KAAKuB,SAAS,CAACY,MAAOD,EAAME,OAAO3B,mDAGnByB,GAChBlC,KAAKuB,SAAS,CAACY,MAAOD,EAAME,OAAO1B,8CAExBwB,GACXG,MAAM,2BAA6BrC,KAAKI,MAAMK,QAC9CyB,EAAMI,mLAkBU,sCAEWC,MAFX,4CAENV,kBACaA,EAASW,cAAtBjC,SAENP,KAAKuB,SAAS,CAACjB,OAAQC,EAAKkC,QAAQ,GAAGpC,SAAQ,IAC/CyB,QAAQC,IAAI,aAAcF,EAASa,QACnCZ,QAAQC,IAAIxB,uIAqChB,OACEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,SACCE,OAAOC,MAGRL,EAAAC,EAAAC,cAAA,WACC7C,KAAKI,MAAMC,UAAYL,KAAKI,MAAME,OAASqC,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UAAR,cAAoCN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAM7C,KAAKI,MAAME,OAAO4C,KAAKC,OAAYR,EAAAC,EAAAC,cAAA,WAAM7C,KAAKI,MAAME,OAAO4C,KAAKE,SAO3JT,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVO,KAAK,sBACLjB,OAAO,SACPkB,IAAI,wBAIZX,EAAAC,EAAAC,cAAA,QAAMU,MAAM,aACRZ,EAAAC,EAAAC,cAAA,OAAKU,MAAM,OACPZ,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACPZ,EAAAC,EAAAC,cAAA,sBACDF,EAAAC,EAAAC,cAAA,YAAUI,GAAG,WAAWd,MAAOnC,KAAKI,MAAMK,OAAQ+C,SAAUxD,KAAKW,gBAEpEgC,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACPZ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,aAMfN,EAAAC,EAAAC,cAAA,OAAKU,MAAM,OACRZ,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACPZ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,YAAUI,GAAG,SAASd,MAAOnC,KAAKI,MAAMM,OAAQ8C,SAAUxD,KAAKyD,qBAGvEd,EAAAC,EAAAC,cAAA,OAAKU,MAAM,YACHZ,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,YACJN,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOa,KAAK,WAAWR,KAAK,oBAAnC,qBAAiFP,EAAAC,EAAAC,cAAA,WAChFF,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,SAAOa,KAAK,WAAWR,KAAK,gBAAnC,qBACDP,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,SAAOa,KAAK,SAASH,MAAM,kBAAkBN,GAAG,UAAUd,MAAM,UAAUwB,QAAS3D,KAAKe,MAAO6C,SAAU5D,KAAKI,MAAMI,YACnHsB,QAAQC,IAAI/B,KAAKI,MAAMG,MACxBoC,EAAAC,EAAAC,cAAA,SAAOa,KAAK,SAASH,MAAM,iBAAiBN,GAAG,QAAQd,MAAM,sBAjNhD0B,cCMbC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":" /js/main.4d1e7290.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class App extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = { \n        data: '',\n        isLoading: false,\n        value1: 'Hello {{name}}! {% if test -%} How are you?{%- endif %}', \n        value2: '{\"name\": \"A\"}' };\n\n        \n\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.click = this.click.bind(this);\n\n        \n\n    }\n\n      \n//post\n click() {\n        //what to send over to flask:\n   /*     template: $('#template').val(),\n            console.log($('#template').val())\n            values: $('#values').val(),\n            input_type: input_type,\n\n            //boolean\n            showwhitespaces: is_checked_showwhitespaces,\n            dummyvalues: is_checked_dummyvalues*/\n        var headers = {\n            'Content-Type': 'application/json',\n           \n        }\n\n\n        const request_info = {\n            template: this.state.value1,\n            values: this.state.value2,\n            input_type: \"json\",\n             showwhitespaces: 1,\n            dummyvalues: 1,\n        }\n\n        this.setState({ isLoading: true });\n\n\n\n/*\n\n\n axios({  method: 'post',\n    url: \"http://localhost:5000/convert\",\n    data: request_info,\n    config: { headers: {'Content-Type': 'multipart/form-data' }}\n    })\n    .then(function (response) {\n        //handle success\n        console.log(response);\n        console.log(\"FORM:\" + request_info);\n    })\n    .catch(function (response) {\n        //handle error\n        console.log(response);\n        console.log(\"FORM\" + request_info);\n\n    })\n    }\n    });*/\n\n        axios.post(\"http://localhost:5000/convert\", {request_info}, {headers: headers})\n            .then((response) => {\n                  this.setState({ data: response.data, isLoading: false });\n                   console.log(request_info)\n             })\n            .catch((err) => {\n                  this.setState({ data: err, isLoading: false });\n                   console.log(request_info)\n             });\n    }\n\n\n  handleChange(event) {\n    this.setState({value: event.target.value1});\n  }\n\n  handleValueChange(event) {\n    this.setState({value: event.target.value2});\n  }\n  handleSubmit(event) {\n    alert('An essay was submitted: ' + this.state.value1);\n    event.preventDefault();\n  }\n\n   \n\n    \n\n//////////////GET/////////////////\n    state = {\n        loading: true,\n        person: null,\n    }\n\n    //This is for the render display\n    async componentDidMount(){\n\n \n\n        const url = \"https://api.randomuser.me/\";\n        //fetch data\n        const response = await fetch(url);\n        const data = await response.json();\n        //change this so that if there is no response in render make it blank \n        this.setState({person: data.results[0],loading:false})\n        console.log(\"response: \"+ response.status)\n        console.log(data)\n\n\n            ////POST////////////////\n\n        \n    }\n    \n/*\n state = {\n        loading_screen: true,\n        template_rendered: null,\n    }\n\n    //This is for the render display\n    async componentDidMount(){\n\n \n\n        const url = \"http://localhost:5000/convert\";\n        //fetch data\n        const response = await fetch(url);\n        const data = await response.json();\n        //change this so that if there is no response in render make it blank \n        this.setState({template_rendered: data,loading_screen:false})\n        console.log(\"response: \"+ response.status)\n        console.log(data)\n\n\n            ////POST////////////////\n\n        \n    }*/\n  \n  render() {\n\n\n    return (\n      <div className=\"App\">\n      \n          <p>\n          {window.token}\n\n\n          <div>\n          {this.state.loading || !this.state.person ? <div id=\"render\">loading...</div> : <div><div>{this.state.person.name.first}</div><div>{this.state.person.name.last}</div></div>}\n          </div>\n\n\n          </p>\n\n\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n           \n          </a>\n    <form class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-md-5\">\n                <h1>Template</h1>\n               <textarea id=\"template\" value={this.state.value1} onChange={this.handleChange}/>\n            </div>\n            <div class=\"col-md-5\">\n                <h1>Render</h1>\n                <div id=\"render\"></div>\n      \n            </div>\n            \n        </div>\n\n         <div class=\"row\">\n            <div class=\"col-md-5\">\n                <h1>Values</h1>\n                <textarea id=\"values\" value={this.state.value2} onChange={this.handleValueChange}></textarea>\n            </div>\n          \n        <div class=\"col-md-5\">\n                <h1>Settings</h1>\n                <div id=\"settings\">\n                    <label><input type=\"checkbox\" name=\"showwhitespaces\"  /> Show whitespaces</label><br/>\n                     <label><input type=\"checkbox\" name=\"dummyvalues\" /> Use dummy values</label>\n                    <h1> JSON</h1>\n                  \n                    <input type=\"button\" class=\"btn btn-success\" id=\"convert\" value=\"Convert\" onClick={this.click} disabled={this.state.isLoading}/>\n                    {console.log(this.state.data)}\n                    <input type=\"button\" class=\"btn btn-danger\" id=\"clear\" value=\"Clear\" />\n                </div>\n            </div>\n  \n        </div>\n    \n    </form>\n\n      </div>\n    );\n  }\n}\n\n// App.propTypes = { action: React.PropTypes.string.isRequired, method: React.PropTypes.string}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}